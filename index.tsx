/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */

import React, { useState, useCallback, useRef, useEffect } from 'react';
import { createRoot } from 'react-dom/client';
// Fix: Import `Type` enum for responseSchema.
import { GoogleGenAI, Type } from '@google/genai';
import * as pdfjsLib from 'pdfjs-dist';
import { marked } from 'marked';
import mammoth from 'mammoth';

// Set worker source for pdf.js from a CDN
pdfjsLib.GlobalWorkerOptions.workerSrc = `https://esm.sh/pdfjs-dist@4.5.136/build/pdf.worker.mjs`;

const INDIAN_LANGUAGES = [
  { code: 'en', name: 'English' },
  { code: 'hi', name: 'Hindi' },
  { code: 'bn', name: 'Bengali' },
  { code: 'te', name: 'Telugu' },
  { code: 'mr', name: 'Marathi' },
  { code: 'ta', name: 'Tamil' },
  { code: 'gu', name: 'Gujarati' },
  { code: 'kn', name: 'Kannada' },
  { code: 'pa', name: 'Punjabi' },
];

const translations = {
  en: {
    headerTitle: "LegalEase AI",
    headerSubtitle: "Demystifying Legal Documents",
    yourDocument: "Your Document",
    analysisLanguageLabel: "Analysis Language:",
    analyzedFile: "Selected File",
    textareaPlaceholder: "The contents of your uploaded file will appear here.",
    processingButton: "Processing...",
    uploadFileButton: "Upload File",
    analyzingButton: "Analyzing...",
    summarizeButton: "Summarize & Analyze",
    dismissError: "Dismiss error",
    loadingMessageDefault: "Analyzing...",
    loadingSummary: "Generating summary...",
    loadingRisks: "Analyzing for risks...",
    loadingELI15: "Simplifying text (ELI15)...",
    loadingExtractingText: "Extracting text from",
    loadingProcessingPDF: "Processing PDF",
    loadingExtractingPages: "Extracting text from document pages...",
    loadingFindingAnswer: "Finding an answer...",
    plainSummaryTab: "Plain Summary",
    eli15Tab: "Explain Like I'm 15",
    riskAnalysisTab: "Risk Analysis",
    askQuestionTab: "Ask a Question",
    readAloudButton: "тЦ╢ Read Aloud",
    stopButton: "тЦа Stop",
    copyButton: "Copy",
    copiedButton: "Copied!",
    suggestionLabel: "ЁЯТб Suggestion:",
    noRisksFound: "No significant risks were identified in the document.",
    qaPlaceholder: "Ask a question about the document.",
    qaInputPlaceholder: "e.g., What is the penalty for early termination?",
    sendButton: "Send",
    welcomeTitle: "Welcome to LegalEase AI",
    welcomeMessage1: "Upload a file to get started.",
    welcomeMessage2: "We'll provide a simple summary, highlight risks, and answer your questions in your chosen language.",
    footerDisclaimer: "Disclaimer: LegalEase AI provides informational summaries and is not a substitute for professional legal advice.",
    errorEmptyDocument: "Please upload a file to begin analysis.",
    errorAnalysis: "An error occurred during analysis. Please try again.",
    errorUnsupportedFile: "Unsupported file type. Please upload a .txt, .docx, .pdf, .jpg, .jpeg, .png, or .webp file.",
    errorNoTextExtracted: "Could not extract any text from the document.",
    errorFileProcessing: "Failed to process file.",
    errorSpeechSynthesis: "Sorry, text-to-speech is not supported by your browser or for the selected language.",
    errorQADefault: "Sorry, I encountered an error. Please try again.",
    pageOf: "page {currentPage} of {totalPages}",
  },
  hi: {
    headerTitle: "рд▓реАрдЧрд▓-рдИрдЬрд╝ рдПрдЖрдИ",
    headerSubtitle: "рдХрд╛рдиреВрдиреА рджрд╕реНрддрд╛рд╡реЗрдЬрд╝реЛрдВ рдХреЛ рд╕рд░рд▓ рдмрдирд╛рдирд╛",
    yourDocument: "рдЖрдкрдХрд╛ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝",
    analysisLanguageLabel: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рднрд╛рд╖рд╛:",
    analyzedFile: "рдЪрдпрдирд┐рдд рдлрд╝рд╛рдЗрд▓",
    textareaPlaceholder: "рдЖрдкрдХреА рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рдлрд╝рд╛рдЗрд▓ рдХреА рд╕рд╛рдордЧреНрд░реА рдпрд╣рд╛рдБ рджрд┐рдЦрд╛рдИ рджреЗрдЧреАред",
    processingButton: "рдкреНрд░реЛрд╕реЗрд╕ рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    uploadFileButton: "рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
    analyzingButton: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    summarizeButton: "рд╕рд╛рд░рд╛рдВрд╢ рдФрд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ",
    dismissError: "рддреНрд░реБрдЯрд┐ рдЦрд╛рд░рд┐рдЬ рдХрд░реЗрдВ",
    loadingMessageDefault: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    loadingSummary: "рд╕рд╛рд░рд╛рдВрд╢ рдмрдирд╛ рд░рд╣рд╛ рд╣реИ...",
    loadingRisks: "рдЬреЛрдЦрд┐рдореЛрдВ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░ рд░рд╣рд╛ рд╣реИ...",
    loadingELI15: "рдЯреЗрдХреНрд╕реНрдЯ рдХреЛ рд╕рд░рд▓ рдмрдирд╛ рд░рд╣рд╛ рд╣реИ (ELI15)...",
    loadingExtractingText: "рд╕реЗ рдЯреЗрдХреНрд╕реНрдЯ рдирд┐рдХрд╛рд▓рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ",
    loadingProcessingPDF: "рдкреАрдбреАрдПрдлрд╝ рдкреНрд░реЛрд╕реЗрд╕ рд╣реЛ рд░рд╣рд╛ рд╣реИ",
    loadingExtractingPages: "рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХреЗ рдкрдиреНрдиреЛрдВ рд╕реЗ рдЯреЗрдХреНрд╕реНрдЯ рдирд┐рдХрд╛рд▓рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...",
    loadingFindingAnswer: "рдЙрддреНрддрд░ рдЦреЛрдЬ рд░рд╣рд╛ рд╣реИ...",
    plainSummaryTab: "рд╕рд░рд▓ рд╕рд╛рд░рд╛рдВрд╢",
    eli15Tab: "15 рд╕рд╛рд▓ рдХреЗ рдмрдЪреНрдЪреЗ рдХреА рддрд░рд╣ рд╕рдордЭрд╛рдУ",
    riskAnalysisTab: "рдЬреЛрдЦрд┐рдо рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
    askQuestionTab: "рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
    readAloudButton: "тЦ╢ рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдУ",
    stopButton: "тЦа рд░реЛрдХреЛ",
    copyButton: "рдХреЙрдкреА",
    copiedButton: "рдХреЙрдкреА рдХрд┐рдпрд╛ рдЧрдпрд╛!",
    suggestionLabel: "ЁЯТб рд╕реБрдЭрд╛рд╡:",
    noRisksFound: "рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдореЗрдВ рдХреЛрдИ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЬреЛрдЦрд┐рдо рдирд╣реАрдВ рдорд┐рд▓рд╛ред",
    qaPlaceholder: "рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдПрдХ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВред",
    qaInputPlaceholder: "рдЬреИрд╕реЗ, рдЬрд▓реНрджреА рд╕рдорд╛рдкреНрддрд┐ рдХреЗ рд▓рд┐рдП рдХреНрдпрд╛ рдЬреБрд░реНрдорд╛рдирд╛ рд╣реИ?",
    sendButton: "рднреЗрдЬреЗрдВ",
    welcomeTitle: "рд▓реАрдЧрд▓-рдИрдЬрд╝ рдПрдЖрдИ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
    welcomeMessage1: "рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
    welcomeMessage2: "рд╣рдо рдЖрдкрдХреА рдЪреБрдиреА рд╣реБрдИ рднрд╛рд╖рд╛ рдореЗрдВ рдПрдХ рд╕рд░рд▓ рд╕рд╛рд░рд╛рдВрд╢ рдкреНрд░рджрд╛рди рдХрд░реЗрдВрдЧреЗ, рдЬреЛрдЦрд┐рдореЛрдВ рдХреЛ рдЙрдЬрд╛рдЧрд░ рдХрд░реЗрдВрдЧреЗ, рдФрд░ рдЖрдкрдХреЗ рдкреНрд░рд╢реНрдиреЛрдВ рдХрд╛ рдЙрддреНрддрд░ рджреЗрдВрдЧреЗред",
    footerDisclaimer: "рдЕрд╕реНрд╡реАрдХрд░рдг: рд▓реАрдЧрд▓-рдИрдЬрд╝ рдПрдЖрдИ рдХреЗрд╡рд▓ рд╕реВрдЪрдирд╛рддреНрдордХ рд╕рд╛рд░рд╛рдВрд╢ рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИ рдФрд░ рдпрд╣ рдкреЗрд╢реЗрд╡рд░ рдХрд╛рдиреВрдиреА рд╕рд▓рд╛рд╣ рдХрд╛ рд╡рд┐рдХрд▓реНрдк рдирд╣реАрдВ рд╣реИред",
    errorEmptyDocument: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
    errorAnalysis: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рджреМрд░рд╛рди рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
    errorUnsupportedFile: "рдЕрд╕рдорд░реНрдерд┐рдд рдлрд╝рд╛рдЗрд▓ рдкреНрд░рдХрд╛рд░ред рдХреГрдкрдпрд╛ .txt, .docx, .pdf, .jpg, .jpeg, .png, рдпрд╛ .webp рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
    errorNoTextExtracted: "рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рд╕реЗ рдХреЛрдИ рдЯреЗрдХреНрд╕реНрдЯ рдирд╣реАрдВ рдирд┐рдХрд╛рд▓рд╛ рдЬрд╛ рд╕рдХрд╛ред",
    errorFileProcessing: "рдлрд╝рд╛рдЗрд▓ рдХреЛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред",
    errorSpeechSynthesis: "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдЯреЗрдХреНрд╕реНрдЯ-рдЯреВ-рд╕реНрдкреАрдЪ рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рджреНрд╡рд╛рд░рд╛ рдпрд╛ рдЪрдпрдирд┐рдд рднрд╛рд╖рд╛ рдХреЗ рд▓рд┐рдП рд╕рдорд░реНрдерд┐рдд рдирд╣реАрдВ рд╣реИред",
    errorQADefault: "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореБрдЭреЗ рдПрдХ рддреНрд░реБрдЯрд┐ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рдирд╛ рдкрдбрд╝рд╛ред рдХреГрдкрдпрд╛ рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
    pageOf: "рдкреГрд╖реНрда {totalPages} рдХрд╛ {currentPage}",
  },
  bn: {
    headerTitle: "рж▓рж┐ржЧрзНржпрж╛рж▓ржЗржЬ ржПржЖржЗ",
    headerSubtitle: "ржЖржЗржирж┐ ржиржерж┐ рж╕рж╣ржЬ ржХрж░рж╛",
    yourDocument: "ржЖржкржирж╛рж░ ржиржерж┐",
    analysisLanguageLabel: "ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржнрж╛рж╖рж╛:",
    analyzedFile: "ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржлрж╛ржЗрж▓",
    textareaPlaceholder: "ржЖржкржирж╛рж░ ржЖржкрж▓рзЛржб ржХрж░рж╛ ржлрж╛ржЗрж▓рзЗрж░ ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБ ржПржЦрж╛ржирзЗ ржкрзНрж░ржжрж░рзНрж╢рж┐ржд рж╣ржмрзЗред",
    processingButton: "ржкрзНрж░рж╕рзЗрж╕ рж╣ржЪрзНржЫрзЗ...",
    uploadFileButton: "ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржи",
    analyzingButton: "ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
    summarizeButton: "рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк ржУ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи",
    dismissError: "рждрзНрж░рзБржЯрж┐ ржЦрж╛рж░рж┐ржЬ ржХрж░рзБржи",
    loadingMessageDefault: "ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
    loadingSummary: "рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ...",
    loadingRisks: "ржЭрзБржБржХрж┐рж░ ржЬржирзНржп ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
    loadingELI15: "ржкрж╛ржарзНржп рж╕рж░рж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ (ELI15)...",
    loadingExtractingText: "ржерзЗржХрзЗ ржкрж╛ржарзНржп ржирж┐рж╖рзНржХрж╛рж╢ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ",
    loadingProcessingPDF: "ржкрж┐ржбрж┐ржПржл ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ",
    loadingExtractingPages: "ржиржерж┐рж░ ржкрзГрж╖рзНржарж╛ ржерзЗржХрзЗ ржкрж╛ржарзНржп ржирж┐рж╖рзНржХрж╛рж╢ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
    loadingFindingAnswer: "ржЙрждрзНрждрж░ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ...",
    plainSummaryTab: "рж╕рж░рж▓ рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк",
    eli15Tab: "ржпрзЗржи ржЖржорж┐ рззрзл ржмржЫрж░рзЗрж░",
    riskAnalysisTab: "ржЭрзБржБржХрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг",
    askQuestionTab: "ржкрзНрж░рж╢рзНржи ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи",
    readAloudButton: "тЦ╢ ржЬрзЛрж░рзЗ ржкржбрж╝рзБржи",
    stopButton: "тЦа ржерж╛ржорзБржи",
    copyButton: "ржХржкрж┐",
    copiedButton: "ржХржкрж┐ рж╣ржпрж╝рзЗржЫрзЗ!",
    suggestionLabel: "ЁЯТб ржкрж░рж╛ржорж░рзНрж╢:",
    noRisksFound: "ржиржерж┐рждрзЗ ржХрзЛржирзЛ ржЙрж▓рзНрж▓рзЗржЦржпрзЛржЧрзНржп ржЭрзБржБржХрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред",
    qaPlaceholder: "ржиржерж┐ рж╕ржорзНржкрж░рзНржХрзЗ ржПржХржЯрж┐ ржкрзНрж░рж╢рзНржи ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржиред",
    qaInputPlaceholder: "ржпрзЗржоржи, рждрж╛ржбрж╝рж╛рждрж╛ржбрж╝рж┐ ржЪрзБржХрзНрждрж┐ржнржЩрзНржЧрзЗрж░ ржЬржирзНржп ржЬрж░рж┐ржорж╛ржирж╛ ржХржд?",
    sendButton: "ржкрзНрж░рзЗрж░ржг ржХрж░рзБржи",
    welcomeTitle: "рж▓рж┐ржЧрзНржпрж╛рж▓ржЗржЬ ржПржЖржЗ-рждрзЗ рж╕рзНржмрж╛ржЧрждржо",
    welcomeMessage1: "рж╢рзБрж░рзБ ржХрж░рждрзЗ ржПржХржЯрж┐ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржиред",
    welcomeMessage2: "ржЖржорж░рж╛ ржЖржкржирж╛рж░ ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржнрж╛рж╖рж╛ржпрж╝ ржПржХржЯрж┐ рж╕рж╣ржЬ рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк ржкрзНрж░ржжрж╛ржи ржХрж░ржм, ржЭрзБржБржХрж┐ржЧрзБрж▓рж┐ рждрзБрж▓рзЗ ржзрж░ржм ржПржмржВ ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрзЗржмред",
    footerDisclaimer: "ржжрж╛ржмрж┐рждрзНржпрж╛ржЧ: рж▓рж┐ржЧрзНржпрж╛рж▓ржЗржЬ ржПржЖржЗ рждржерзНржпржорзВрж▓ржХ рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк ржкрзНрж░ржжрж╛ржи ржХрж░рзЗ ржПржмржВ ржПржЯрж┐ ржкрзЗрж╢рж╛ржжрж╛рж░ ржЖржЗржирж┐ ржкрж░рж╛ржорж░рзНрж╢рзЗрж░ ржмрж┐ржХрж▓рзНржк ржиржпрж╝ред",
    errorEmptyDocument: "ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рж╢рзБрж░рзБ ржХрж░рждрзЗ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржиред",
    errorAnalysis: "ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ рж╕ржоржпрж╝ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
    errorUnsupportedFile: "ржЕрж╕ржорж░рзНржерж┐ржд ржлрж╛ржЗрж▓рзЗрж░ ржзрж░ржиред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ .txt, .docx, .pdf, .jpg, .jpeg, .png, ржмрж╛ .webp ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржиред",
    errorNoTextExtracted: "ржиржерж┐ ржерзЗржХрзЗ ржХрзЛржирзЛ ржкрж╛ржарзНржп ржирж┐рж╖рзНржХрж╛рж╢ржи ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред",
    errorFileProcessing: "ржлрж╛ржЗрж▓ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред",
    errorSpeechSynthesis: "ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржмрж╛ ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржнрж╛рж╖рж╛рж░ ржЬржирзНржп ржЯрзЗржХрзНрж╕ржЯ-ржЯрзБ-рж╕рзНржкрзАржЪ рж╕ржорж░рзНржерж┐ржд ржиржпрж╝ред",
    errorQADefault: "ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
    pageOf: "ржкрзГрж╖рзНржарж╛ {totalPages} ржПрж░ {currentPage}",
  },
  te: {
    headerTitle: "р░▓р▒Ар░Чр░▓р▒Нр░Ир░Ьр▒Н р░Пр░Р",
    headerSubtitle: "р░Ър░Яр▒Нр░Яр░кр░░р░ор▒Ир░и р░кр░др▒Нр░░р░╛р░▓р░ир▒Б р░╕р▒Бр░▓р░нр░др░░р░В р░Ър▒Зр░пр░бр░В",
    yourDocument: "р░ор▒А р░кр░др▒Нр░░р░В",
    analysisLanguageLabel: "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░нр░╛р░╖:",
    analyzedFile: "р░Ор░Вр░Ър▒Бр░Хр▒Бр░ир▒Нр░и р░лр▒Ир░▓р▒Н",
    textareaPlaceholder: "р░ор▒Ар░░р▒Б р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░╕р░┐р░и р░лр▒Ир░▓р▒Н р░пр▒Кр░Хр▒Нр░Х р░╡р░┐р░╖р░пр░╛р░▓р▒Б р░Зр░Хр▒Нр░Хр░б р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др░╛р░пр░┐.",
    processingButton: "р░кр▒Нр░░р░╛р░╕р▒Жр░╕р▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...",
    uploadFileButton: "р░лр▒Ир░▓р▒Н р░Ер░кр▒Нр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
    analyzingButton: "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...",
    summarizeButton: "р░╕р░╛р░░р░╛р░Вр░╢р░В & р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
    dismissError: "р░▓р▒Лр░кр░╛р░ир▒Нр░ир░┐ р░др▒Ар░╕р░┐р░╡р▒Зр░пр░Вр░бр░┐",
    loadingMessageDefault: "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...",
    loadingSummary: "р░╕р░╛р░░р░╛р░Вр░╢р░В р░╕р▒Гр░╖р▒Нр░Яр░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...",
    loadingRisks: "р░кр▒Нр░░р░ор░╛р░жр░╛р░▓ р░Хр▒Лр░╕р░В р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...",
    loadingELI15: "р░╡р░Ър░ир░╛р░ир▒Нр░ир░┐ р░╕р▒Бр░▓р░нр░др░░р░В р░Ър▒Зр░╕р▒Нр░др▒Лр░Вр░жр░┐ (ELI15)...",
    loadingExtractingText: "р░ир▒Бр░Вр░бр░┐ р░╡р░Ър░ир░╛р░ир▒Нр░ир░┐ р░╕р░Вр░Чр▒Нр░░р░╣р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐",
    loadingProcessingPDF: "PDF р░кр▒Нр░░р░╛р░╕р▒Жр░╕р▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐",
    loadingExtractingPages: "р░кр░др▒Нр░░р░В р░кр▒Зр░Ьр▒Ар░▓ р░ир▒Бр░Вр░бр░┐ р░╡р░Ър░ир░╛р░ир▒Нр░ир░┐ р░╕р░Вр░Чр▒Нр░░р░╣р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...",
    loadingFindingAnswer: "р░╕р░ор░╛р░зр░╛р░ир░В р░Хр▒Лр░╕р░В р░╡р▒Жр░др▒Бр░Хр▒Бр░др▒Лр░Вр░жр░┐...",
    plainSummaryTab: "р░╕р░╛р░зр░╛р░░р░г р░╕р░╛р░░р░╛р░Вр░╢р░В",
    eli15Tab: "15 р░Пр░│р▒Нр░▓ р░╡р░╛р░░р░┐р░Хр░┐ р░╡р░┐р░╡р░░р░┐р░Вр░Ър░┐р░ир░Яр▒Нр░▓р▒Б",
    riskAnalysisTab: "р░кр▒Нр░░р░ор░╛р░ж р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
    askQuestionTab: "р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐",
    readAloudButton: "тЦ╢ р░мр░┐р░Чр▒Нр░Чр░░р░Чр░╛ р░Ър░жр░╡р░Вр░бр░┐",
    stopButton: "тЦа р░Жр░кр░Вр░бр░┐",
    copyButton: "р░Хр░╛р░кр▒А",
    copiedButton: "р░Хр░╛р░кр▒А р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐!",
    suggestionLabel: "ЁЯТб р░╕р▒Вр░Ър░и:",
    noRisksFound: "р░кр░др▒Нр░░р░Вр░▓р▒Л р░ор▒Бр░Цр▒Нр░пр░ор▒Ир░и р░кр▒Нр░░р░ор░╛р░жр░╛р░▓р▒Б р░Пр░╡р▒А р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░▓р▒Зр░жр▒Б.",
    qaPlaceholder: "р░кр░др▒Нр░░р░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Тр░Х р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐.",
    qaInputPlaceholder: "р░Йр░жр░╛., р░ор▒Бр░Вр░жр▒Бр░Чр░╛ р░░р░жр▒Нр░жр▒Б р░Ър▒Зр░╕р▒Бр░Хр▒Бр░Вр░Яр▒З р░Ьр░░р░┐р░ор░╛р░ир░╛ р░Ор░Вр░д?",
    sendButton: "р░кр░Вр░кр░Вр░бр░┐",
    welcomeTitle: "р░▓р▒Ар░Чр░▓р▒Нр░Ир░Ьр▒Н р░Пр░Рр░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В",
    welcomeMessage1: "р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░Тр░Х р░лр▒Ир░▓р▒НтАМр░ир▒Б р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐.",
    welcomeMessage2: "р░ор▒Зр░ор▒Б р░ор▒Ар░░р▒Б р░Ор░Вр░Ър▒Бр░Хр▒Бр░ир▒Нр░и р░нр░╛р░╖р░▓р▒Л р░Тр░Х р░╕р░╛р░зр░╛р░░р░г р░╕р░╛р░░р░╛р░Вр░╢р░╛р░ир▒Нр░ир░┐ р░Ер░Вр░жр░┐р░╕р▒Нр░др░╛р░ор▒Б, р░кр▒Нр░░р░ор░╛р░жр░╛р░▓р░ир▒Б р░╣р▒Ир░▓р▒Ир░Яр▒Н р░Ър▒Зр░╕р▒Нр░др░╛р░ор▒Б р░ор░░р░┐р░пр▒Б р░ор▒А р░кр▒Нр░░р░╢р▒Нр░ир░▓р░Хр▒Б р░╕р░ор░╛р░зр░╛р░ир░ор░┐р░╕р▒Нр░др░╛р░ор▒Б.",
    footerDisclaimer: "р░ир░┐р░░р░╛р░Хр░░р░г: р░▓р▒Ар░Чр░▓р▒Нр░Ир░Ьр▒Н р░Пр░Р р░╕р░ор░╛р░Ър░╛р░░ р░╕р░╛р░░р░╛р░Вр░╢р░╛р░▓р░ир▒Б р░Ер░Вр░жр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐ р░ор░░р░┐р░пр▒Б р░Зр░жр░┐ р░╡р▒Гр░др▒Нр░др░┐р░кр░░р░ор▒Ир░и р░ир▒Нр░пр░╛р░п р░╕р░▓р░╣р░╛р░Хр▒Б р░кр▒Нр░░р░др▒Нр░пр░╛р░ор▒Нр░ир░╛р░пр░В р░Хр░╛р░жр▒Б.",
    errorEmptyDocument: "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░жр░пр░Ър▒Зр░╕р░┐ р░Тр░Х р░лр▒Ир░▓р▒НтАМр░ир▒Б р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐.",
    errorAnalysis: "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░╕р░ор░пр░Вр░▓р▒Л р░Тр░Х р░▓р▒Лр░кр░В р░╕р░Вр░нр░╡р░┐р░Вр░Ър░┐р░Вр░жр░┐ред р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.",
    errorUnsupportedFile: "р░ор░жр▒Нр░жр░др▒Б р░▓р▒Зр░ир░┐ р░лр▒Ир░▓р▒Н р░░р░Хр░Вред р░жр░пр░Ър▒Зр░╕р░┐ .txt, .docx, .pdf, .jpg, .jpeg, .png, р░▓р▒Зр░жр░╛ .webp р░лр▒Ир░▓р▒Нр░ир▒Б р░Ер░кр▒Нр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐.",
    errorNoTextExtracted: "р░кр░др▒Нр░░р░В р░ир▒Бр░Вр░бр░┐ р░П р░╡р░Ър░ир░╛р░ир▒Нр░ир░┐ р░╕р░Вр░Чр▒Нр░░р░╣р░┐р░Вр░Ър░▓р▒Зр░Хр░кр▒Лр░пр░┐р░Вр░жр░┐.",
    errorFileProcessing: "р░лр▒Ир░▓р▒Нр░ир▒Б р░кр▒Нр░░р░╛р░╕р▒Жр░╕р▒Н р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░╡р░┐р░лр░▓р░ор▒Ир░Вр░жр░┐.",
    errorSpeechSynthesis: "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░ор▒А р░мр▒Нр░░р▒Мр░Ьр░░р▒Нр░▓р▒Л р░▓р▒Зр░жр░╛ р░Ор░Вр░Ър▒Бр░Хр▒Бр░ир▒Нр░и р░нр░╛р░╖р░Хр▒Б р░Яр▒Жр░Хр▒Нр░╕р▒Нр░Яр▒Н-р░Яр▒Б-р░╕р▒Нр░кр▒Ар░Ър▒Н р░ор░жр▒Нр░жр░др▒Б р░▓р▒Зр░жр▒Б.",
    errorQADefault: "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░ир▒Зр░ир▒Б р░Тр░Х р░▓р▒Лр░кр░╛р░ир▒Нр░ир░┐ р░Ор░жр▒Бр░░р▒Нр░Хр▒Кр░ир▒Нр░ир░╛р░ир▒Бред р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.",
    pageOf: "{totalPages}р░▓р▒Л {currentPage}р░╡ р░кр▒Зр░Ьр▒А",
  },
  mr: {
    headerTitle: "рд▓реАрдЧрд▓рдИрдЭ рдПрдЖрдп",
    headerSubtitle: "рдХрд╛рдпрджреЗрд╢реАрд░ рдХрд╛рдЧрджрдкрддреНрд░реЗ рд╕реЛрдкреА рдХрд░рдгреЗ",
    yourDocument: "рддреБрдордЪреЗ рджрд╕реНрддрдРрд╡рдЬ",
    analysisLanguageLabel: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рднрд╛рд╖рд╛:",
    analyzedFile: "рдирд┐рд╡рдбрд▓реЗрд▓реА рдлрд╛рдЗрд▓",
    textareaPlaceholder: "рддреБрдордЪреНрдпрд╛ рдЕрдкрд▓реЛрдб рдХреЗрд▓реЗрд▓реНрдпрд╛ рдлрд╛рдЗрд▓рдордзреАрд▓ рдордЬрдХреВрд░ рдпреЗрдереЗ рджрд┐рд╕реЗрд▓.",
    processingButton: "рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╣реЛрдд рдЖрд╣реЗ...",
    uploadFileButton: "рдлрд╛рдИрд▓ рдЕрдкрд▓реЛрдб рдХрд░рд╛",
    analyzingButton: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛрдд рдЖрд╣реЗ...",
    summarizeButton: "рд╕рд╛рд░рд╛рдВрд╢ рдЖрдгрд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рд╛",
    dismissError: "рддреНрд░реБрдЯреА рдХрд╛рдврд╛",
    loadingMessageDefault: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛрдд рдЖрд╣реЗ...",
    loadingSummary: "рд╕рд╛рд░рд╛рдВрд╢ рддрдпрд╛рд░ рдХрд░рдд рдЖрд╣реЗ...",
    loadingRisks: "рдзреЛрдХреНрдпрд╛рдВрд╕рд╛рдареА рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдд рдЖрд╣реЗ...",
    loadingELI15: "рдордЬрдХреВрд░ рд╕реЛрдкрд╛ рдХрд░рдд рдЖрд╣реЗ (ELI15)...",
    loadingExtractingText: "рдордзреВрди рдордЬрдХреВрд░ рдХрд╛рдврдд рдЖрд╣реЗ",
    loadingProcessingPDF: "рдкреАрдбреАрдПрдл рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╣реЛрдд рдЖрд╣реЗ",
    loadingExtractingPages: "рджрд╕реНрддрдРрд╡рдЬрд╛рдЪреНрдпрд╛ рдкрд╛рдирд╛рдВрдордзреВрди рдордЬрдХреВрд░ рдХрд╛рдврдд рдЖрд╣реЗ...",
    loadingFindingAnswer: "рдЙрддреНрддрд░ рд╢реЛрдзрдд рдЖрд╣реЗ...",
    plainSummaryTab: "рд╕рд╛рдзрд╛ рд╕рд╛рд░рд╛рдВрд╢",
    eli15Tab: "резрел рд╡рд░реНрд╖рд╛рдВрдЪреНрдпрд╛ рдореБрд▓рд╛рд▓рд╛ рд╕рдордЬрд╛рд╡рд▓реНрдпрд╛рдкреНрд░рдорд╛рдгреЗ",
    riskAnalysisTab: "рдзреЛрдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
    askQuestionTab: "рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛",
    readAloudButton: "тЦ╢ рдореЛрдареНрдпрд╛рдиреЗ рд╡рд╛рдЪрд╛",
    stopButton: "тЦа рдерд╛рдВрдмрд╛",
    copyButton: "рдХреЙрдкреА рдХрд░рд╛",
    copiedButton: "рдХреЙрдкреА рдХреЗрд▓реЗ!",
    suggestionLabel: "ЁЯТб рд╕реВрдЪрдирд╛:",
    noRisksFound: "рджрд╕реНрддрдРрд╡рдЬрд╛рдд рдХреЛрдгрддреЗрд╣реА рдорд╣рддреНрддреНрд╡рдкреВрд░реНрдг рдзреЛрдХреЗ рдЖрдврд│рд▓реЗ рдирд╛рд╣реАрдд.",
    qaPlaceholder: "рджрд╕реНрддрдРрд╡рдЬрд╛рдмрджреНрджрд▓ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛.",
    qaInputPlaceholder: "рдЙрджрд╛., рд▓рд╡рдХрд░ рд╕рдорд╛рдкреНрддреАрд╕рд╛рдареА рдХрд╛рдп рджрдВрдб рдЖрд╣реЗ?",
    sendButton: "рдкрд╛рдард╡рд╛",
    welcomeTitle: "рд▓реАрдЧрд▓рдИрдЭ рдПрдЖрдп рдордзреНрдпреЗ рдЖрдкрд▓реЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ",
    welcomeMessage1: "рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдПрдХ рдлрд╛рдИрд▓ рдЕрдкрд▓реЛрдб рдХрд░рд╛.",
    welcomeMessage2: "рдЖрдореНрд╣реА рддреБрдордЪреНрдпрд╛ рдирд┐рд╡рдбрд▓реЗрд▓реНрдпрд╛ рднрд╛рд╖реЗрдд рдПрдХ рд╕рд╛рдзрд╛ рд╕рд╛рд░рд╛рдВрд╢ рджреЗрдК, рдзреЛрдХреЗ рд╣рд╛рдпрд▓рд╛рдЗрдЯ рдХрд░реВ рдЖрдгрд┐ рддреБрдордЪреНрдпрд╛ рдкреНрд░рд╢реНрдирд╛рдВрдЪреА рдЙрддреНрддрд░реЗ рджреЗрдК.",
    footerDisclaimer: "рдЕрд╕реНрд╡реАрдХрд░рдг: рд▓реАрдЧрд▓рдИрдЭ рдПрдЖрдп рдорд╛рд╣рд┐рддреАрдкреВрд░реНрдг рд╕рд╛рд░рд╛рдВрд╢ рдкреНрд░рджрд╛рди рдХрд░рддреЗ рдЖрдгрд┐ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХрд╛рдпрджреЗрд╢реАрд░ рд╕рд▓реНрд▓реНрдпрд╛рдЪрд╛ рдкрд░реНрдпрд╛рдп рдирд╛рд╣реА.",
    errorEmptyDocument: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдХреГрдкрдпрд╛ рдПрдХ рдлрд╛рдИрд▓ рдЕрдкрд▓реЛрдб рдХрд░рд╛.",
    errorAnalysis: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рджрд░рдореНрдпрд╛рди рддреНрд░реБрдЯреА рдЖрд▓реАред рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.",
    errorUnsupportedFile: "рдЕрд╕рдорд░реНрдерд┐рдд рдлрд╛рдИрд▓ рдкреНрд░рдХрд╛рд░ред рдХреГрдкрдпрд╛ .txt, .docx, .pdf, .jpg, .jpeg, .png, рдХрд┐рдВрд╡рд╛ .webp рдлрд╛рдИрд▓ рдЕрдкрд▓реЛрдб рдХрд░рд╛.",
    errorNoTextExtracted: "рджрд╕реНрддрдРрд╡рдЬрд╛рддреВрди рдХреЛрдгрддрд╛рд╣реА рдордЬрдХреВрд░ рдХрд╛рдврддрд╛ рдЖрд▓рд╛ рдирд╛рд╣реА.",
    errorFileProcessing: "рдлрд╛рдИрд▓рд╡рд░ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХрд░рдгреНрдпрд╛рдд рдЕрдпрд╢рд╕реНрд╡реА.",
    errorSpeechSynthesis: "рдХреНрд╖рдорд╕реНрд╡, рдЖрдкрд▓реНрдпрд╛ рдмреНрд░рд╛рдЙрдЭрд░рджреНрд╡рд╛рд░реЗ рдХрд┐рдВрд╡рд╛ рдирд┐рд╡рдбрд▓реЗрд▓реНрдпрд╛ рднрд╛рд╖реЗрд╕рд╛рдареА рдЯреЗрдХреНрд╕реНрдЯ-рдЯреВ-рд╕реНрдкреАрдЪ рд╕рдорд░реНрдерд┐рдд рдирд╛рд╣реА.",
    errorQADefault: "рдХреНрд╖рдорд╕реНрд╡, рдорд▓рд╛ рдПрдХ рддреНрд░реБрдЯреА рдЖрд▓реАред рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.",
    pageOf: "рдкреГрд╖реНрда {totalPages} рдкреИрдХреА {currentPage}",
  },
  ta: {
    headerTitle: "ро▓рпАроХро▓рпНроИро╕рпН AI",
    headerSubtitle: "роЪроЯрпНроЯ роЖро╡рогроЩрпНроХро│рпИ роОро│ро┐роорпИропро╛роХрпНроХрпБродро▓рпН",
    yourDocument: "роЙроЩрпНроХро│рпН роЖро╡рогроорпН",
    analysisLanguageLabel: "рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роорпКро┤ро┐:",
    analyzedFile: "родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯ роХрпЛрокрпНрокрпБ",
    textareaPlaceholder: "роирпАроЩрпНроХро│рпН рокродро┐ро╡рпЗро▒рпНро▒ро┐роп роХрпЛрокрпНрокро┐ройрпН роЙро│рпНро│роЯроХрпНроХроорпН роЗроЩрпНроХрпЗ роХро╛рогрпНрокро┐роХрпНроХрокрпНрокроЯрпБроорпН.",
    processingButton: "роЪрпЖропро▓ро╛роХрпНроХродрпНродро┐ро▓рпН роЙро│рпНро│родрпБ...",
    uploadFileButton: "роХрпЛрокрпНрокрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН",
    analyzingButton: "рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпБроХро┐ро▒родрпБ...",
    summarizeButton: "роЪрпБро░рпБроХрпНроХроорпН рооро▒рпНро▒рпБроорпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ",
    dismissError: "рокро┐ро┤рпИропрпИ роиро┐ро░ро╛роХро░ро┐",
    loadingMessageDefault: "рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпБроХро┐ро▒родрпБ...",
    loadingSummary: "роЪрпБро░рпБроХрпНроХроорпН роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ...",
    loadingRisks: "роЖрокродрпНродрпБроХро│рпБроХрпНроХро╛роХ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпБроХро┐ро▒родрпБ...",
    loadingELI15: "роЙро░рпИропрпИ роОро│ро┐роорпИропро╛роХрпНроХрпБроХро┐ро▒родрпБ (ELI15)...",
    loadingExtractingText: "роЗро░рпБроирпНродрпБ роЙро░рпИропрпИрокрпН рокро┐ро░ро┐родрпНродрпЖроЯрпБроХрпНроХро┐ро▒родрпБ",
    loadingProcessingPDF: "PDF роЪрпЖропро▓ро╛роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ",
    loadingExtractingPages: "роЖро╡рогрокрпН рокроХрпНроХроЩрпНроХро│ро┐ро▓ро┐ро░рпБроирпНродрпБ роЙро░рпИропрпИрокрпН рокро┐ро░ро┐родрпНродрпЖроЯрпБроХрпНроХро┐ро▒родрпБ...",
    loadingFindingAnswer: "рокродро┐ро▓рпИродрпН родрпЗроЯрпБроХро┐ро▒родрпБ...",
    plainSummaryTab: "роОро│ро┐роп роЪрпБро░рпБроХрпНроХроорпН",
    eli15Tab: "15 ро╡ропродрпБ роЪро┐ро▒рпБро╡ройрпБроХрпНроХрпБ ро╡ро┐ро│роХрпНроХрпБро╡родрпБ рокрпЛро▓рпН",
    riskAnalysisTab: "роЖрокродрпНродрпБ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ",
    askQuestionTab: "роХрпЗро│рпНро╡ро┐ роХрпЗроЯрпНроХро╡рпБроорпН",
    readAloudButton: "тЦ╢ роЙро░роХрпНроХрокрпН рокроЯро┐роХрпНроХро╡рпБроорпН",
    stopButton: "тЦа роиро┐ро▒рпБродрпНродрпБ",
    copyButton: "роироХро▓рпЖроЯрпБ",
    copiedButton: "роироХро▓рпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯродрпБ!",
    suggestionLabel: "ЁЯТб рокро░ро┐роирпНродрпБро░рпИ:",
    noRisksFound: "роЖро╡рогродрпНродро┐ро▓рпН роХрпБро▒ро┐рокрпНрокро┐роЯродрпНродроХрпНроХ роЖрокродрпНродрпБроХро│рпН роОродрпБро╡рпБроорпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ.",
    qaPlaceholder: "роЖро╡рогроорпН роХрпБро▒ро┐родрпНродрпБ роТро░рпБ роХрпЗро│рпНро╡ро┐ роХрпЗроЯрпНроХро╡рпБроорпН.",
    qaInputPlaceholder: "роО.роХро╛., роорпБройрпНроХрпВроЯрпНроЯро┐ропрпЗ роорпБроЯро┐родрпНродро╛ро▓рпН роОройрпНрой роЕрокро░ро╛родроорпН?",
    sendButton: "роЕройрпБрокрпНрокрпБ",
    welcomeTitle: "ро▓рпАроХро▓рпНроИро╕рпН AI-роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН",
    welcomeMessage1: "родрпКроЯроЩрпНроХрпБро╡родро▒рпНроХрпБ роТро░рпБ роХрпЛрокрпНрокрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН.",
    welcomeMessage2: "роиро╛роЩрпНроХро│рпН роирпАроЩрпНроХро│рпН родрпЗро░рпНроирпНродрпЖроЯрпБродрпНрод роорпКро┤ро┐ропро┐ро▓рпН роТро░рпБ роОро│ро┐роп роЪрпБро░рпБроХрпНроХродрпНродрпИ ро╡ро┤роЩрпНроХрпБро╡рпЛроорпН, роЖрокродрпНродрпБроХро│рпИ роорпБройрпНройро┐ро▓рпИрокрпНрокроЯрпБродрпНродрпБро╡рпЛроорпН, роорпЗро▓рпБроорпН роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ рокродро┐ро▓ро│ро┐рокрпНрокрпЛроорпН.",
    footerDisclaimer: "рокрпКро▒рпБрокрпНрокрпБродрпН родрпБро▒рокрпНрокрпБ: ро▓рпАроХро▓рпНроИро╕рпН AI родроХро╡ро▓рпН роЪрпБро░рпБроХрпНроХроЩрпНроХро│рпИ ро╡ро┤роЩрпНроХрпБроХро┐ро▒родрпБ рооро▒рпНро▒рпБроорпН роЗродрпБ родрпКро┤ро┐ро▓рпНроорпБро▒рпИ роЪроЯрпНроЯ роЖро▓рпЛроЪройрпИроХрпНроХрпБ рооро╛ро▒рпНро▒ро╛роХро╛родрпБ.",
    errorEmptyDocument: "рокроХрпБрокрпНрокро╛ропрпНро╡рпИродрпН родрпКроЯроЩрпНроХ, родропро╡рпБроЪрпЖропрпНродрпБ роТро░рпБ роХрпЛрокрпНрокрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН.",
    errorAnalysis: "рокроХрпБрокрпНрокро╛ропрпНро╡ро┐ройрпН рокрпЛродрпБ роТро░рпБ рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБред родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
    errorUnsupportedFile: "роЖродро░ро┐роХрпНроХрокрпНрокроЯро╛род роХрпЛрокрпНрокрпБ ро╡роХрпИред родропро╡рпБроЪрпЖропрпНродрпБ .txt, .docx, .pdf, .jpg, .jpeg, .png, роЕро▓рпНро▓родрпБ .webp роХрпЛрокрпНрокрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН.",
    errorNoTextExtracted: "роЖро╡рогродрпНродро┐ро▓ро┐ро░рпБроирпНродрпБ роОроирпНрод роЙро░рпИропрпИропрпБроорпН рокро┐ро░ро┐родрпНродрпЖроЯрпБроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.",
    errorFileProcessing: "роХрпЛрокрпНрокрпИроЪрпН роЪрпЖропро▓ро╛роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.",
    errorSpeechSynthesis: "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЙроЩрпНроХро│рпН роЙро▓ро╛ро╡ро┐ роЕро▓рпНро▓родрпБ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯ роорпКро┤ро┐роХрпНроХрпБ роЯрпЖроХрпНро╕рпНроЯрпН-роЯрпБ-ро╕рпНрокрпАроЪрпН роЖродро░ро┐роХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ.",
    errorQADefault: "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роиро╛ройрпН роТро░рпБ рокро┐ро┤рпИропрпИ роОродро┐ро░рпНроХрпКрогрпНроЯрпЗройрпНред родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
    pageOf: "рокроХрпНроХроорпН {totalPages}-роЗро▓рпН {currentPage}",
  },
  gu: {
    headerTitle: "рк▓рлАркЧрк▓ркЗркЭ ркПркЖркЗ",
    headerSubtitle: "ркХрк╛ркирлВркирлА ркжрк╕рлНркдрк╛рк╡рлЗркЬрлЛркирлЗ рк╕рк░рк│ ркмркирк╛рк╡рк╡рлБркВ",
    yourDocument: "ркдркорк╛рк░рлЛ ркжрк╕рлНркдрк╛рк╡рлЗркЬ",
    analysisLanguageLabel: "рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркнрк╛рк╖рк╛:",
    analyzedFile: "рккрк╕ркВркж ркХрк░рлЗрк▓рлА рклрк╛ркЗрк▓",
    textareaPlaceholder: "ркдркорк╛рк░рлА ркЕрккрк▓рлЛркб ркХрк░рлЗрк▓рлА рклрк╛ркЗрк▓ркирлА рк╕рк╛ркоркЧрлНрк░рлА ркЕрк╣рлАркВ ркжрлЗркЦрк╛рк╢рлЗ.",
    processingButton: "рккрлНрк░ркХрлНрк░рк┐ркпрк╛ ркЪрк╛рк▓рлА рк░рк╣рлА ркЫрлЗ...",
    uploadFileButton: "рклрк╛ркЗрк▓ ркЕрккрк▓рлЛр░бр▒Н ркХрк░рлЛ",
    analyzingButton: "рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркеркИ рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
    summarizeButton: "рк╕рк╛рк░рк╛ркВрк╢ ркЕркирлЗ рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркХрк░рлЛ",
    dismissError: "ркнрлВрк▓ркирлЗ ркиркХрк╛рк░рлЛ",
    loadingMessageDefault: "рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркеркИ рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
    loadingSummary: "рк╕рк╛рк░рк╛ркВрк╢ ркмркирк╛рк╡рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
    loadingRisks: "ркЬрлЛркЦркорлЛ ркорк╛ркЯрлЗ рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
    loadingELI15: "ркЯрлЗркХрлНрк╕рлНркЯркирлЗ рк╕рк░рк│ ркмркирк╛рк╡рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ (ELI15)...",
    loadingExtractingText: "ркорк╛ркВркерлА ркЯрлЗркХрлНрк╕рлНркЯ ркХрк╛ркврлА рк░рк╣рлНркпрлБркВ ркЫрлЗ",
    loadingProcessingPDF: "рккрлАркбрлАркПркл рккрк░ рккрлНрк░ркХрлНрк░рк┐ркпрк╛ ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ",
    loadingExtractingPages: "ркжрк╕рлНркдрк╛рк╡рлЗркЬркирк╛ рккрлГрк╖рлНркарлЛркорк╛ркВркерлА ркЯрлЗркХрлНрк╕рлНркЯ ркХрк╛ркврлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
    loadingFindingAnswer: "ркЬрк╡рк╛ркм рк╢рлЛркзрлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
    plainSummaryTab: "рк╕рк╛ркжрлЛ рк╕рк╛рк░рк╛ркВрк╢",
    eli15Tab: "ркЬрк╛ркгрлЗ рк╣рлБркВ 15 рк╡рк░рлНрк╖ркирлЛ ркЫрлБркВ",
    riskAnalysisTab: "ркЬрлЛркЦрко рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг",
    askQuestionTab: "рккрлНрк░рк╢рлНрки рккрлВркЫрлЛ",
    readAloudButton: "тЦ╢ ркорлЛркЯрлЗркерлА рк╡рк╛ркВркЪрлЛ",
    stopButton: "тЦа рк░рлЛркХрлЛ",
    copyButton: "ркХрлЙрккрк┐ ркХрк░рлЛ",
    copiedButton: "ркХрлЙр░крк┐ ркеркпрлБркВ!",
    suggestionLabel: "ЁЯТб рк╕рлВркЪрки:",
    noRisksFound: "ркжрк╕рлНркдрк╛рк╡рлЗркЬркорк╛ркВ ркХрлЛркИ ркирлЛркВркзрккрк╛ркдрлНрк░ ркЬрлЛркЦркорлЛ ркорк│рлНркпрк╛ркВ ркиркерлА.",
    qaPlaceholder: "ркжрк╕рлНркдрк╛рк╡рлЗркЬ рк╡рк┐рк╢рлЗ ркПркХ рккрлНрк░рк╢рлНрки рккрлВркЫрлЛ.",
    qaInputPlaceholder: "ркжрк╛.ркд., рк╕ркоркп рккрк╣рлЗрк▓рк╛ рк╕ркорк╛рккрлНркдрк┐ ркорк╛ркЯрлЗ рк╢рлБркВ ркжркВркб ркЫрлЗ?",
    sendButton: "ркорлЛркХрк▓рлЛ",
    welcomeTitle: "рк▓рлАркЧрк▓ркЗркЭ ркПркЖркЗ ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ",
    welcomeMessage1: "рк╢рк░рлВ ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркПркХ рклрк╛ркЗрк▓ ркЕрккрк▓рлЛркб ркХрк░рлЛ.",
    welcomeMessage2: "ркЕркорлЗ ркдркорк╛рк░рлА рккрк╕ркВркж ркХрк░рлЗрк▓рлА ркнрк╛рк╖рк╛ркорк╛ркВ ркПркХ рк╕рк╛ркжрлЛ рк╕рк╛рк░рк╛ркВрк╢ ркЖрккрлАрк╢рлБркВ, ркЬрлЛркЦркорлЛркирлЗ рккрлНрк░ркХрк╛рк╢рк┐ркд ркХрк░рлАрк╢рлБркВ, ркЕркирлЗ ркдркорк╛рк░рк╛ рккрлНрк░рк╢рлНркирлЛркирк╛ ркЬрк╡рк╛ркм ркЖрккрлАрк╢рлБркВ.",
    footerDisclaimer: "ркЕрк╕рлНрк╡рлАркХрк░ркг: рк▓рлАркЧрк▓ркЗркЭ ркПркЖркЗ ркорк╛рк╣рк┐ркдрлАрккрлНрк░ркж рк╕рк╛рк░рк╛ркВрк╢ рккрлНрк░ркжрк╛рки ркХрк░рлЗ ркЫрлЗ ркЕркирлЗ ркдрлЗ рк╡рлНркпрк╛рк╡рк╕рк╛ркпрк┐ркХ ркХрк╛ркирлВркирлА рк╕рк▓рк╛рк╣ркирлЛ рк╡рк┐ркХрк▓рлНркк ркиркерлА.",
    errorEmptyDocument: "рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг рк╢рк░рлВ ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркПркХ рклрк╛ркЗрк▓ ркЕрккрк▓рлЛркб ркХрк░рлЛ.",
    errorAnalysis: "рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркжрк░ркорк┐ркпрк╛рки ркПркХ ркнрлВрк▓ ркЖрк╡рлАред ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.",
    errorUnsupportedFile: "ркЕрк╕ркорк░рлНркерк┐ркд рклрк╛ркЗрк▓ рккрлНрк░ркХрк╛рк░ред ркХрлГрккрк╛ ркХрк░рлАркирлЗ .txt, .docx, .pdf, .jpg, .jpeg, .png, ркЕркерк╡рк╛ .webp р░лрк╛ркЗрк▓ ркЕрккрк▓рлЛркб ркХрк░рлЛ.",
    errorNoTextExtracted: "ркжрк╕рлНркдрк╛рк╡рлЗркЬркорк╛ркВркерлА ркХрлЛркИ ркЯрлЗркХрлНрк╕рлНркЯ ркХрк╛ркврлА рк╢ркХрк╛ркпрлЛ ркиркерлА.",
    errorFileProcessing: "рклрк╛ркЗрк▓ рккрк░ рккрлНрк░ркХрлНрк░рк┐ркпрк╛ ркХрк░рк╡рк╛ркорк╛ркВ ркирк┐рк╖рлНрклрк│.",
    errorSpeechSynthesis: "ркорк╛ркл ркХрк░рк╢рлЛ, ркдркорк╛рк░рк╛ ркмрлНрк░рк╛ркЙркЭрк░ ркжрлНрк╡рк╛рк░рк╛ ркЕркерк╡рк╛ рккрк╕ркВркж ркХрк░рлЗрк▓рлА ркнрк╛рк╖рк╛ ркорк╛ркЯрлЗ ркЯрлЗркХрлНрк╕рлНркЯ-ркЯрлБ-рк╕рлНрккрлАркЪ рк╕ркорк░рлНркерк┐ркд ркиркерлА.",
    errorQADefault: "ркорк╛ркл ркХрк░рк╢рлЛ, ркоркирлЗ ркПркХ ркнрлВрк▓ ркЖрк╡рлАред ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.",
    pageOf: "рккрлГрк╖рлНрка {totalPages} ркорк╛ркВркерлА {currentPage}",
  },
  kn: {
    headerTitle: "р▓▓р│Ар▓Чр▓▓р│НтАМр▓Ир▓╕р│Н р▓Ор▓Р",
    headerSubtitle: "р▓Хр▓╛р▓ир│Вр▓ир│Б р▓жр▓╛р▓Цр▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓╕р▓░р▓│р▓Чр│Кр▓│р▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б",
    yourDocument: "р▓ир▓┐р▓ор│Нр▓о р▓бр▓╛р▓Хр│Нр▓пр│Бр▓ор│Жр▓Вр▓Яр│Н",
    analysisLanguageLabel: "р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр▓╛ р▓нр▓╛р▓╖р│Ж:",
    analyzedFile: "р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐р▓ж р▓лр│Ир▓▓р│Н",
    textareaPlaceholder: "р▓ир▓┐р▓ор│Нр▓о р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐р▓ж р▓лр│Ир▓▓р│НтАМр▓и р▓╡р▓┐р▓╖р▓пр▓Чр▓│р│Б р▓Зр▓▓р│Нр▓▓р▓┐ р▓Хр▓╛р▓гр▓┐р▓╕р│Бр▓др│Нр▓др▓╡р│Ж.",
    processingButton: "р▓╕р▓Вр▓╕р│Нр▓Хр▓░р▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
    uploadFileButton: "р▓лр│Ир▓▓р│Н р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐",
    analyzingButton: "р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
    summarizeButton: "р▓╕р▓╛р▓░р▓╛р▓Вр▓╢ р▓ор▓др│Нр▓др│Б р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж",
    dismissError: "р▓жр│Лр▓╖р▓╡р▓ир│Нр▓ир│Б р▓╡р▓Ьр▓╛р▓Чр│Кр▓│р▓┐р▓╕р▓┐",
    loadingMessageDefault: "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
    loadingSummary: "р▓╕р▓╛р▓░р▓╛р▓Вр▓╢р▓╡р▓ир│Нр▓ир│Б р▓░р▓Ър▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
    loadingRisks: "р▓Ер▓кр▓╛р▓пр▓Чр▓│р▓┐р▓Чр▓╛р▓Чр▓┐ р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
    loadingELI15: "р▓кр▓ар│Нр▓пр▓╡р▓ир│Нр▓ир│Б р▓╕р▓░р▓│р▓Чр│Кр▓│р▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж (ELI15)...",
    loadingExtractingText: "р▓жр▓┐р▓Вр▓ж р▓кр▓ар│Нр▓пр▓╡р▓ир│Нр▓ир│Б р▓╣р│Кр▓░р▓др│Жр▓Чр│Жр▓пр▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж",
    loadingProcessingPDF: "р▓кр▓┐р▓бр▓┐р▓Ор▓лр│Н р▓╕р▓Вр▓╕р│Нр▓Хр▓░р▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж",
    loadingExtractingPages: "р▓бр▓╛р▓Хр│Нр▓пр│Бр▓ор│Жр▓Вр▓Яр│Н р▓кр│Бр▓Яр▓Чр▓│р▓┐р▓Вр▓ж р▓кр▓ар│Нр▓пр▓╡р▓ир│Нр▓ир│Б р▓╣р│Кр▓░р▓др│Жр▓Чр│Жр▓пр▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
    loadingFindingAnswer: "р▓Йр▓др│Нр▓др▓░р▓╡р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
    plainSummaryTab: "р▓╕р▓░р▓│ р▓╕р▓╛р▓░р▓╛р▓Вр▓╢",
    eli15Tab: "15 р▓╡р▓░р│Нр▓╖р▓жр▓╡р▓░р▓┐р▓Чр│Ж р▓╡р▓┐р▓╡р▓░р▓┐р▓╕р▓┐р▓жр▓Вр▓др│Ж",
    riskAnalysisTab: "р▓Ер▓кр▓╛р▓п р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж",
    askQuestionTab: "р▓кр│Нр▓░р▓╢р│Нр▓ир│Ж р▓Хр│Зр▓│р▓┐",
    readAloudButton: "тЦ╢ р▓Чр▓Яр│Нр▓Яр▓┐р▓пр▓╛р▓Чр▓┐ р▓Ур▓жр▓┐",
    stopButton: "тЦа р▓ир▓┐р▓▓р│Нр▓▓р▓┐р▓╕р▓┐",
    copyButton: "р▓ир▓Хр▓▓р▓┐р▓╕р▓┐",
    copiedButton: "р▓ир▓Хр▓▓р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж!",
    suggestionLabel: "ЁЯТб р▓╕р▓▓р▓╣р│Ж:",
    noRisksFound: "р▓бр▓╛р▓Хр│Нр▓пр│Бр▓ор│Жр▓Вр▓Яр│НтАМр▓ир▓▓р│Нр▓▓р▓┐ р▓пр▓╛р▓╡р│Бр▓жр│З р▓Чр▓ор▓ир▓╛р▓░р│Нр▓╣ р▓Ер▓кр▓╛р▓пр▓Чр▓│р│Б р▓Хр▓Вр▓бр│Бр▓мр▓Вр▓жр▓┐р▓▓р│Нр▓▓.",
    qaPlaceholder: "р▓бр▓╛р▓Хр│Нр▓пр│Бр▓ор│Жр▓Вр▓Яр│Н р▓мр▓Чр│Нр▓Чр│Ж р▓Тр▓Вр▓жр│Б р▓кр│Нр▓░р▓╢р│Нр▓ир│Ж р▓Хр│Зр▓│р▓┐.",
    qaInputPlaceholder: "р▓Йр▓жр▓╛., р▓Ер▓╡р▓зр▓┐р▓Чр│Ж р▓ор│Бр▓ир│Нр▓ир▓╡р│З р▓ор│Бр▓Хр│Нр▓др▓╛р▓пр▓Чр│Кр▓│р▓┐р▓╕р▓┐р▓жр▓░р│Ж р▓жр▓Вр▓бр▓╡р│Зр▓ир│Б?",
    sendButton: "р▓Хр▓│р│Бр▓╣р▓┐р▓╕р▓┐",
    welcomeTitle: "р▓▓р│Ар▓Чр▓▓р│НтАМр▓Ир▓╕р│Н р▓Ор▓Рр▓Чр│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д",
    welcomeMessage1: "р▓кр│Нр▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р▓▓р│Б р▓Тр▓Вр▓жр│Б р▓лр│Ир▓▓р│Н р▓Ер▓ир│Нр▓ир│Б р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐.",
    welcomeMessage2: "р▓ир▓╛р▓╡р│Б р▓ир│Ар▓╡р│Б р▓Жр▓пр│Нр▓Хр│Ж р▓ор▓╛р▓бр▓┐р▓ж р▓нр▓╛р▓╖р│Жр▓пр▓▓р│Нр▓▓р▓┐ р▓╕р▓░р▓│ р▓╕р▓╛р▓░р▓╛р▓Вр▓╢р▓╡р▓ир│Нр▓ир│Б р▓Тр▓жр▓Чр▓┐р▓╕р│Бр▓др│Нр▓др│Зр▓╡р│Ж, р▓Ер▓кр▓╛р▓пр▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Ир▓▓р│Ир▓Яр│Н р▓ор▓╛р▓бр│Бр▓др│Нр▓др│Зр▓╡р│Ж р▓ор▓др│Нр▓др│Б р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р│Бр▓др│Нр▓др│Зр▓╡р│Ж.",
    footerDisclaimer: "р▓╣р▓Хр│Нр▓Хр│Б р▓ир▓┐р▓░р▓╛р▓Хр▓░р▓гр│Ж: р▓▓р│Ар▓Чр▓▓р│НтАМр▓Ир▓╕р│Н р▓Ор▓Р р▓ор▓╛р▓╣р▓┐р▓др▓┐р▓кр│Вр▓░р│Нр▓г р▓╕р▓╛р▓░р▓╛р▓Вр▓╢р▓Чр▓│р▓ир│Нр▓ир│Б р▓Тр▓жр▓Чр▓┐р▓╕р│Бр▓др│Нр▓др▓жр│Ж р▓ор▓др│Нр▓др│Б р▓Зр▓жр│Б р▓╡р│Гр▓др│Нр▓др▓┐р▓кр▓░ р▓Хр▓╛р▓ир│Вр▓ир│Б р▓╕р▓▓р▓╣р│Жр▓Чр│Ж р▓кр▓░р│Нр▓пр▓╛р▓пр▓╡р▓▓р│Нр▓▓.",
    errorEmptyDocument: "р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж р▓кр│Нр▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р▓▓р│Б р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓Тр▓Вр▓жр│Б р▓лр│Ир▓▓р│Н р▓Ер▓ир│Нр▓ир│Б р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐.",
    errorAnalysis: "р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Жр▓п р▓╕р▓ор▓пр▓жр▓▓р│Нр▓▓р▓┐ р▓жр│Лр▓╖ р▓╕р▓Вр▓нр▓╡р▓┐р▓╕р▓┐р▓жр│Жред р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐.",
    errorUnsupportedFile: "р▓мр│Жр▓Вр▓мр▓▓р▓╡р▓┐р▓▓р│Нр▓▓р▓ж р▓лр│Ир▓▓р│Н р▓кр│Нр▓░р▓Хр▓╛р▓░ред р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б .txt, .docx, .pdf, .jpg, .jpeg, .png, р▓Ер▓ер▓╡р▓╛ .webp р▓лр│Ир░▓р▒Н р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐.",
    errorNoTextExtracted: "р▓бр▓╛р▓Хр│Нр▓пр│Бр▓ор│Жр▓Вр▓Яр│НтАМр▓ир▓┐р▓Вр▓ж р▓пр▓╛р▓╡р│Бр▓жр│З р▓кр▓ар│Нр▓пр▓╡р▓ир│Нр▓ир│Б р▓╣р│Кр▓░р▓др│Жр▓Чр│Жр▓пр▓▓р│Б р▓╕р▓╛р▓зр│Нр▓пр▓╡р▓╛р▓Чр▓▓р▓┐р▓▓р│Нр▓▓.",
    errorFileProcessing: "р▓лр│Ир▓▓р│Н р▓╕р▓Вр▓╕р│Нр▓Хр▓░р▓┐р▓╕р▓▓р│Б р▓╡р▓┐р▓лр▓▓р▓╡р▓╛р▓Чр▓┐р▓жр│Ж.",
    errorSpeechSynthesis: "р▓Хр│Нр▓╖р▓ор▓┐р▓╕р▓┐, р▓ир▓┐р▓ор│Нр▓о р▓мр│Нр▓░р│Мр▓╕р▓░р│Н р▓Ер▓ер▓╡р▓╛ р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐р▓ж р▓нр▓╛р▓╖р│Жр▓Чр│Ж р▓Яр│Жр▓Хр│Нр▓╕р│Нр▓Яр│Н-р▓Яр│Б-р▓╕р│Нр▓кр│Ар▓Ър│Н р▓мр│Жр▓Вр▓мр▓▓р▓┐р▓др▓╡р▓╛р▓Чр▓┐р▓▓р│Нр▓▓.",
    errorQADefault: "р▓Хр│Нр▓╖р▓ор▓┐р▓╕р▓┐, р▓ир▓ир▓Чр│Ж р▓жр│Лр▓╖ р▓Ор▓жр│Бр▓░р▓╛р▓Чр▓┐р▓жр│Жред р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐.",
    pageOf: "{totalPages} р▓кр│Бр▓Яр▓Чр▓│р▓▓р│Нр▓▓р▓┐ {currentPage} р▓ир│З р▓кр│Бр▓Я",
  },
  pa: {
    headerTitle: "ри▓рйАриЧри▓риИриЬри╝ риПриЖриИ",
    headerSubtitle: "риХри╛риирйВрй░риирйА рижри╕ридри╛ри╡рйЗриЬри╝ри╛риВ риирйВрй░ ри╕ри░ри▓ римригри╛риЙригри╛",
    yourDocument: "ридрйБри╣ри╛рибри╛ рижри╕ридри╛ри╡рйЗриЬри╝",
    analysisLanguageLabel: "ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг ринри╛ри╕ри╝ри╛:",
    analyzedFile: "риЪрйБригрйА ри╣рйЛриИ рилри╛риИри▓",
    textareaPlaceholder: "ридрйБри╣ри╛рибрйА риЕрй▒рикри▓рйЛриб риХрйАридрйА рилри╛риИри▓ рижрйА ри╕риорй▒риЧри░рйА риЗрй▒риерйЗ рижри┐риЦри╛риИ рижрйЗри╡рйЗриЧрйАред",
    processingButton: "рикрйНри░рйЛри╕рйИри╕ ри╣рйЛ ри░ри┐ри╣ри╛ ри╣рйИ...",
    uploadFileButton: "рилри╛риИри▓ риЕрй▒рикри▓с┤Приб риХри░рйЛ",
    analyzingButton: "ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг ри╣рйЛ ри░ри┐ри╣ри╛ ри╣рйИ...",
    summarizeButton: "ри╕рй░риЦрйЗрик риЕридрйЗ ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг риХри░рйЛ",
    dismissError: "риЧри▓ридрйА риирйВрй░ риЦри╛ри░риЬ риХри░рйЛ",
    loadingMessageDefault: "ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг ри╣рйЛ ри░ри┐ри╣ри╛ ри╣рйИ...",
    loadingSummary: "ри╕рй░риЦрйЗрик римригри╛риЗриЖ риЬри╛ ри░ри┐ри╣ри╛ ри╣рйИ...",
    loadingRisks: "риЦридри░ри┐риЖриВ ри▓риИ ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг риХрйАридри╛ риЬри╛ ри░ри┐ри╣ри╛ ри╣рйИ...",
    loadingELI15: "риЯрйИриХри╕риЯ риирйВрй░ ри╕ри░ри▓ римригри╛риЗриЖ риЬри╛ ри░ри┐ри╣ри╛ ри╣рйИ (ELI15)...",
    loadingExtractingText: "ридрйЛриВ риЯрйИриХри╕риЯ риХрй▒риври┐риЖ риЬри╛ ри░ри┐ри╣ри╛ ри╣рйИ",
    loadingProcessingPDF: "PDF рикрйНри░рйЛри╕рйИри╕ ри╣рйЛ ри░ри╣рйА ри╣рйИ",
    loadingExtractingPages: "рижри╕ридри╛ри╡рйЗриЬри╝ рижрйЗ рикрй░риири┐риЖриВ ридрйЛриВ риЯрйИриХри╕риЯ риХрй▒риври┐риЖ риЬри╛ ри░ри┐ри╣ри╛ ри╣рйИ...",
    loadingFindingAnswer: "риЬри╡ри╛рим ри▓рй▒ринри┐риЖ риЬри╛ ри░ри┐ри╣ри╛ ри╣рйИ...",
    plainSummaryTab: "ри╕ризри╛ри░рии ри╕рй░риЦрйЗрик",
    eli15Tab: "риЬри┐ри╡рйЗриВ риорйИриВ 15 ри╕ри╛ри▓ри╛риВ рижри╛ ри╣ри╛риВ",
    riskAnalysisTab: "риЦридри░ри╛ ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг",
    askQuestionTab: "ри╕ри╡ри╛ри▓ рикрйБрй▒риЫрйЛ",
    readAloudButton: "тЦ╢ риЙрй▒риЪрйА рикрйЬрйНри╣рйЛ",
    stopButton: "тЦа ри░рйЛриХрйЛ",
    copyButton: "риХри╛рикрйА риХри░рйЛ",
    copiedButton: "риХри╛рикрйА ри╣рйЛ риЧри┐риЖ!",
    suggestionLabel: "ЁЯТб ри╕рйБриЭри╛риЕ:",
    noRisksFound: "рижри╕ридри╛ри╡рйЗриЬри╝ ри╡ри┐рй▒риЪ риХрйЛриИ риори╣рй▒ридри╡рикрйВри░рии риЦридри░ри╛ риири╣рйАриВ рикри╛риЗриЖ риЧри┐риЖред",
    qaPlaceholder: "рижри╕ридри╛ри╡рйЗриЬри╝ римри╛ри░рйЗ риЗрй▒риХ ри╕ри╡ри╛ри▓ рикрйБрй▒риЫрйЛред",
    qaInputPlaceholder: "риЙрижри╛ри╣ри░рии ри▓риИ, риЬри▓рижрйА ри╕риори╛рикридрйА ри▓риИ риХрйА риЬрйБри░риори╛риири╛ ри╣рйИ?",
    sendButton: "ринрйЗриЬрйЛ",
    welcomeTitle: "ри▓рйАриЧри▓риИриЬри╝ риПриЖриИ ри╡ри┐рй▒риЪ ридрйБри╣ри╛рибри╛ ри╕рйБриЖриЧрид ри╣рйИ",
    welcomeMessage1: "ри╕ри╝рйБри░рйВ риХри░рии ри▓риИ риЗрй▒риХ рилри╛риИри▓ риЕрй▒рикри▓с┤Приб риХри░рйЛред",
    welcomeMessage2: "риЕри╕рйАриВ ридрйБри╣ри╛рибрйА риЪрйБригрйА ри╣рйЛриИ ринри╛ри╕ри╝ри╛ ри╡ри┐рй▒риЪ риЗрй▒риХ ри╕ризри╛ри░рии ри╕рй░риЦрйЗрик рикрйНри░рижри╛рии риХри░ри╛риВриЧрйЗ, риЦридри░ри┐риЖриВ риирйВрй░ риЙриЬри╛риЧри░ риХри░ри╛риВриЧрйЗ, риЕридрйЗ ридрйБри╣ри╛рибрйЗ ри╕ри╡ри╛ри▓ри╛риВ рижрйЗ риЬри╡ри╛рим рижрйЗри╡ри╛риВриЧрйЗред",
    footerDisclaimer: "римрйЗрижри╛риЕри╡ри╛: ри▓рйАриЧри▓риИриЬри╝ риПриЖриИ ри╕ри┐ри░рил риЬри╛ригриХри╛ри░рйА ринри░рикрйВри░ ри╕рй░риЦрйЗрик рикрйНри░рижри╛рии риХри░рижри╛ ри╣рйИ риЕридрйЗ риЗри╣ рикрйЗри╕ри╝рйЗри╡ри░ риХри╛риирйВрй░риирйА ри╕ри▓ри╛ри╣ рижри╛ римрижри▓ риири╣рйАриВ ри╣рйИред",
    errorEmptyDocument: "ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг ри╕ри╝рйБри░рйВ риХри░рии ри▓риИ риХри┐ри░рикри╛ риХри░риХрйЗ риЗрй▒риХ рилри╛риИри▓ риЕрй▒рикри▓рйЛриб риХри░рйЛред",
    errorAnalysis: "ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг рижрйМри░ри╛рии риЗрй▒риХ риЧри▓ридрйА риЖриИред риХри┐ри░рикри╛ риХри░риХрйЗ рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛред",
    errorUnsupportedFile: "риЕри╕риори░риери┐рид рилри╛риИри▓ риХри┐ри╕риоред риХри┐ри░рикри╛ риХри░риХрйЗ .txt, .docx, .pdf, .jpg, .jpeg, .png, риЬри╛риВ .webp рилри╛риИри▓ риЕрй▒рикри▓с┤Приб риХри░рйЛред",
    errorNoTextExtracted: "рижри╕ридри╛ри╡рйЗриЬри╝ ридрйЛриВ риХрйЛриИ риЯрйИриХри╕риЯ риири╣рйАриВ риХрй▒риври┐риЖ риЬри╛ ри╕риХри┐риЖред",
    errorFileProcessing: "рилри╛риИри▓ риирйВрй░ рикрйНри░рйЛри╕рйИри╕ риХри░рии ри╡ри┐рй▒риЪ риЕри╕рилри▓ред",
    errorSpeechSynthesis: "риори╛рил риХри░риири╛, ридрйБри╣ри╛рибрйЗ римрйНри░ри╛риКриЬри╝ри░ рижрйБриЖри░ри╛ риЬри╛риВ риЪрйБригрйА риЧриИ ринри╛ри╕ри╝ри╛ ри▓риИ риЯрйИриХри╕риЯ-риЯрйВ-ри╕рикрйАриЪ ри╕риори░риери┐рид риири╣рйАриВ ри╣рйИред",
    errorQADefault: "риори╛рил риХри░риири╛, риорйИриирйВрй░ риЗрй▒риХ риЧри▓ридрйА риЖриИ ри╣рйИред риХри┐ри░рикри╛ риХри░риХрйЗ рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛред",
    pageOf: "рикрй░риири╛ {totalPages} ри╡ри┐рй▒риЪрйЛриВ {currentPage}",
  }
};


const App = () => {
  const [documentText, setDocumentText] = useState(''); // For the read-only textarea display
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [analyzedText, setAnalyzedText] = useState(''); // For Q&A context
  const [summary, setSummary] = useState('');
  const [risks, setRisks] = useState([]);
  const [eli15, setEli15] = useState('');
  const [qaHistory, setQaHistory] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [loadingMessage, setLoadingMessage] = useState('');
  const [error, setError] = useState('');
  const [activeTab, setActiveTab] = useState('summary');
  const [language, setLanguage] = useState('en');
  const [copiedSummary, setCopiedSummary] = useState(false);
  const [copiedEli15, setCopiedEli15] = useState(false);
  const [isDraggingOver, setIsDraggingOver] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [speakingTab, setSpeakingTab] = useState(null);
  const [voices, setVoices] = useState([]);
  const [theme, setTheme] = useState('light');

  const chatRef = useRef(null);
  const chatLanguageRef = useRef(null);
  const qaHistoryRef = useRef(null);
  const aiClientRef = useRef(null); // Ref to hold the AI client instance
  
  const t = translations[language] || translations.en;

  // Theme management
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme') ||
        (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    setTheme(savedTheme);
  }, []);

  useEffect(() => {
    document.body.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
  }, [theme]);

  const toggleTheme = useCallback(() => {
    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));
  }, []);

  // Lazily initialize and get the AI client. This prevents crashing on load.
  const getAiClient = () => {
    if (!aiClientRef.current) {
      aiClientRef.current = new GoogleGenAI({ apiKey: process.env.API_KEY });
    }
    return aiClientRef.current;
  };

  // Auto-scroll for Q&A
  useEffect(() => {
    if (qaHistoryRef.current) {
      qaHistoryRef.current.scrollTop = qaHistoryRef.current.scrollHeight;
    }
  }, [qaHistory]);
    
  // Load speech synthesis voices
  useEffect(() => {
    const loadVoices = () => {
      setVoices(window.speechSynthesis.getVoices());
    };
    window.speechSynthesis.addEventListener('voiceschanged', loadVoices);
    loadVoices(); // Initial load for browsers that have them ready
    return () => {
      window.speechSynthesis.removeEventListener('voiceschanged', loadVoices);
    };
  }, []);

  // Cleanup speech synthesis on component unmount or state changes
  useEffect(() => {
    return () => {
        window.speechSynthesis.cancel();
    };
  }, []);

  useEffect(() => {
    if (isSpeaking) {
        window.speechSynthesis.cancel();
        setIsSpeaking(false);
        setSpeakingTab(null);
    }
  }, [activeTab, language]);

  const runAnalysis = useCallback(async (textToAnalyze) => {
    window.speechSynthesis.cancel();
    setIsSpeaking(false);
    setSpeakingTab(null);

    if (!textToAnalyze.trim()) {
      setError(t.errorNoTextExtracted); // Use more specific error
      setIsLoading(false);
      return;
    }
    
    setError('');
    // Note: isLoading is already true from the calling function `handleStartAnalysis`
    setSummary('');
    setRisks([]);
    setEli15('');
    setQaHistory([]);
    chatRef.current = null; // Reset chat

    const languageName = INDIAN_LANGUAGES.find(l => l.code === language)?.name || 'English';
    const languageInstruction = ` Respond ONLY in ${languageName}.`;

    try {
      const ai = getAiClient();
      setLoadingMessage(t.loadingSummary);
      const summaryPromise = ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: `You are a legal expert. Summarize the following legal text in plain, easy-to-understand language. Use markdown.${languageInstruction} Legal Text: \n\n${textToAnalyze}`,
      });

      setLoadingMessage(t.loadingRisks);
      const risksPromise = ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: `You are an AI legal assistant. Analyze the following legal text for risks. For each risk, identify the clause, explain the risk, and provide a concrete, actionable suggestion.${languageInstruction} Legal Text: \n\n${textToAnalyze}`,
        config: {
          responseMimeType: 'application/json',
          // Fix: Use `Type` enum for responseSchema as per coding guidelines.
          responseSchema: {
            type: Type.OBJECT,
            properties: {
              risks: {
                type: Type.ARRAY,
                items: {
                  type: Type.OBJECT,
                  properties: {
                    clause: { type: Type.STRING, description: 'The specific risky clause.' },
                    explanation: { type: Type.STRING, description: 'Why this is a risk.' },
                    suggestion: { type: Type.STRING, description: 'An actionable suggestion for the user.' },
                  },
                },
              },
            },
          },
        },
      });

      setLoadingMessage(t.loadingELI15);
       const eli15Promise = ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: `Explain the following legal text like I'm 15 years old. Use simple words and analogies.${languageInstruction} Legal Text: \n\n${textToAnalyze}`,
      });

      // Use Promise.allSettled for more robust error handling
      const results = await Promise.allSettled([summaryPromise, risksPromise, eli15Promise]);
      const [summaryResult, risksResult, eli15Result] = results;

      let hasError = false;

      // Process summary
      if (summaryResult.status === 'fulfilled' && summaryResult.value.text) {
        setSummary(summaryResult.value.text);
      } else {
        console.error("Summary analysis failed:", summaryResult.status === 'rejected' ? summaryResult.reason : 'Empty response');
        hasError = true;
      }
      
      // Process ELI15
      if (eli15Result.status === 'fulfilled' && eli15Result.value.text) {
          setEli15(eli15Result.value.text);
      } else {
          console.error("ELI15 analysis failed:", eli15Result.status === 'rejected' ? eli15Result.reason : 'Empty response');
          // Non-critical, don't set hasError
      }

      // Process risks
      if (risksResult.status === 'fulfilled' && risksResult.value.text) {
        try {
          const parsedRisks = JSON.parse(risksResult.value.text.trim());
          setRisks(parsedRisks.risks || []);
        } catch (e) {
          console.error("Failed to parse risks JSON:", e);
          console.error("Received text for risks:", risksResult.value.text);
          setRisks([]); // Default to no risks on parse error
          hasError = true; // Parsing is a critical failure
        }
      } else {
        console.error("Risks analysis failed:", risksResult.status === 'rejected' ? risksResult.reason : 'Empty response');
        setRisks([]); // Default to no risks on API failure
        hasError = true;
      }
      
      setAnalyzedText(textToAnalyze); // Save context for Q&A

      if (hasError) {
        setError(t.errorAnalysis);
      }

      setActiveTab('summary');

    } catch (err) {
      console.error(err);
      setError(t.errorAnalysis);
    } finally {
      setIsLoading(false);
      setLoadingMessage('');
    }
  }, [language, t]);

  const extractTextFromImage = useCallback(async (file) => {
    setLoadingMessage(`${t.loadingExtractingText} ${file.name}...`);
    // Fix: Specify the Promise generic type to ensure `base64` is a string.
    const base64 = await new Promise<string>((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        if (typeof reader.result === 'string') {
          resolve(reader.result.split(',')[1]);
        } else {
          reject(new Error('Failed to read file as data URL.'));
        }
      };
      reader.onerror = error => reject(error);
      reader.readAsDataURL(file);
    });

    const ai = getAiClient();
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: {
            parts: [
                { text: "Extract all text from this document image. Preserve formatting like paragraphs and line breaks where possible." },
                { inlineData: { mimeType: file.type, data: base64 } }
            ]
        }
    });
    return response.text;
  }, [t]);

  const extractTextFromPdf = useCallback(async (file) => {
    const arrayBuffer = await file.arrayBuffer();
    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
    const pageImageParts = [];

    for (let i = 1; i <= pdf.numPages; i++) {
        const pageMessage = t.pageOf.replace('{currentPage}', i).replace('{totalPages}', pdf.numPages);
        setLoadingMessage(`${t.loadingProcessingPDF} (${pageMessage})...`);
        const page = await pdf.getPage(i);
        const viewport = page.getViewport({ scale: 1.5 });
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.height = viewport.height;
        canvas.width = viewport.width;

        if (!context) {
            throw new Error('Could not get canvas context.');
        }

        await page.render({ canvas: canvas, canvasContext: context, viewport: viewport }).promise;

        const base64 = canvas.toDataURL('image/jpeg').split(',')[1];
        pageImageParts.push({ inlineData: { mimeType: 'image/jpeg', data: base64 } });
    }

    setLoadingMessage(t.loadingExtractingPages);
    const prompt = [
        { text: "Extract all text from the following document pages. Combine the text from all pages into a single cohesive document, preserving formatting like paragraphs where possible." },
        ...pageImageParts
    ];

    const ai = getAiClient();
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: { parts: prompt }
    });
    return response.text;
  }, [t]);

  const extractTextFromDocx = useCallback(async (file) => {
    setLoadingMessage(`${t.loadingExtractingText} ${file.name}...`);
    const arrayBuffer = await file.arrayBuffer();
    const result = await mammoth.extractRawText({ arrayBuffer });
    return result.value;
  }, [t]);

  const handleFileUpload = useCallback((file: File | null) => {
    if (!file) return;

    // Reset UI state for the new file
    setError('');
    setSummary('');
    setRisks([]);
    setEli15('');
    setQaHistory([]);
    setAnalyzedText('');
    chatRef.current = null;
    setActiveTab('summary');

    setUploadedFile(file);
    setDocumentText(''); // Clear previous file's text
  }, []);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      handleFileUpload(file);
    }
    // Reset file input to allow re-uploading the same file
    if (event.target) event.target.value = '';
  };

  const handleStartAnalysis = useCallback(async () => {
    // This is the single entry point for all analysis, triggered by the button.
    if (!uploadedFile) {
        setError(t.errorEmptyDocument);
        return;
    }

    setIsLoading(true);
    setError('');
    
    try {
        let extractedText = '';
        if (uploadedFile.type === 'text/plain') {
            extractedText = await uploadedFile.text();
        } else if (uploadedFile.type === 'application/pdf') {
            extractedText = await extractTextFromPdf(uploadedFile);
        } else if (uploadedFile.type.startsWith('image/')) {
            extractedText = await extractTextFromImage(uploadedFile);
        } else if (uploadedFile.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
            extractedText = await extractTextFromDocx(uploadedFile);
        } else {
            throw new Error(t.errorUnsupportedFile);
        }

        if (!extractedText || !extractedText.trim()) {
            throw new Error(t.errorNoTextExtracted);
        }
        setDocumentText(extractedText); // Show extracted text in the read-only textarea
        
        // Now that we have the text, run the summary/risk analysis.
        await runAnalysis(extractedText);

    } catch (err) {
        const errorMessage = (err instanceof Error) ? err.message : t.errorFileProcessing;
        setError(errorMessage);
        setIsLoading(false); // Ensure loading stops on extraction error
        setLoadingMessage('');
    }
  }, [uploadedFile, runAnalysis, t, extractTextFromDocx, extractTextFromImage, extractTextFromPdf]);

  const handleQaSubmit = useCallback(async (e) => {
    e.preventDefault();
    if (!currentQuestion.trim() || !analyzedText) return;
    
    window.speechSynthesis.cancel();
    setIsSpeaking(false);
    setSpeakingTab(null);

    const question = currentQuestion;
    setCurrentQuestion('');
    
    // If language has changed since chat started, reset chat
    if (chatRef.current && chatLanguageRef.current !== language) {
      chatRef.current = null;
      setQaHistory([]);
    }

    setIsLoading(true);
    setLoadingMessage(t.loadingFindingAnswer);
    
    const languageName = INDIAN_LANGUAGES.find(l => l.code === language)?.name || 'English';

    if (!chatRef.current) {
        const systemInstruction = `You are a helpful AI legal assistant. Your task is to answer user questions about the provided legal document.
1.  **Prioritize the Document:** First, always try to answer based on the text of the document provided below.
2.  **Use General Knowledge:** If the document doesn't contain the answer, you can use your general knowledge to explain related legal concepts, suggest potential solutions for risks, or answer 'what if' questions.
3.  **Language:** Respond ONLY in ${languageName}.
4.  **Disclaimer:** IMPORTANT: Conclude EVERY response with the following disclaimer on a new line: "${t.footerDisclaimer}"

LEGAL DOCUMENT CONTEXT:
---
${analyzedText}
---`;
        
        const ai = getAiClient();
        chatRef.current = ai.chats.create({
            model: 'gemini-2.5-flash',
            history: [
                { role: 'user', parts: [{ text: systemInstruction }] },
                { role: 'model', parts: [{ text: `Understood. I will answer questions about the document, use my general knowledge when needed, respond in ${languageName}, and always include the disclaimer.` }] }
            ],
        });
        chatLanguageRef.current = language;
    }

    setQaHistory(prev => [...prev, { role: 'user', text: question }]);

    try {
        const stream = await chatRef.current.sendMessageStream({ message: question });
        setIsLoading(false);
        setLoadingMessage('');

        let aiResponse = '';
        setQaHistory(prev => [...prev, { role: 'ai', text: '...' }]);
        
        for await (const chunk of stream) {
            aiResponse += chunk.text;
            setQaHistory(prev => {
                const newHistory = [...prev];
                newHistory[newHistory.length - 1] = { role: 'ai', text: aiResponse };
                return newHistory;
            });
        }
    } catch (err) {
      console.error(err);
      setQaHistory(prev => [...prev, { role: 'ai', text: t.errorQADefault }]);
    } finally {
      setIsLoading(false);
      setLoadingMessage('');
    }
  }, [currentQuestion, analyzedText, language, t]);

  const handleCopy = (text, type) => {
      navigator.clipboard.writeText(text);
      if (type === 'summary') {
          setCopiedSummary(true);
          setTimeout(() => setCopiedSummary(false), 2000);
      } else {
          setCopiedEli15(true);
          setTimeout(() => setCopiedEli15(false), 2000);
      }
  };

  const handleReadAloud = useCallback((text, tab) => {
      // Stop any current speech if the same button is clicked again
      if (isSpeaking && speakingTab === tab) {
          window.speechSynthesis.cancel();
          setIsSpeaking(false);
          setSpeakingTab(null);
          return;
      }

      window.speechSynthesis.cancel(); // Stop any other speech

      // Check for browser support
      if (!('speechSynthesis' in window) || !window.speechSynthesis) {
          setError(t.errorSpeechSynthesis);
          return;
      }

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = language;

      // Use the pre-loaded voices from state for matching
      const voice = voices.find(v => v.lang.startsWith(language));
      if (voice) {
          utterance.voice = voice;
      }

      utterance.onend = () => {
          setIsSpeaking(false);
          setSpeakingTab(null);
      };

      // Improved error handling
      utterance.onerror = (e) => {
          // Browsers often fire "interrupted" or "canceled" errors when speech is stopped manually.
          // We can safely ignore these as they are not true errors.
          if (e.error === 'interrupted' || e.error === 'canceled') {
              console.warn(`Speech synthesis gracefully stopped: ${e.error}`);
              setIsSpeaking(false);
              setSpeakingTab(null);
              return;
          }
          console.error(`Speech synthesis error: ${e.error}`, e);
          setIsSpeaking(false);
          setSpeakingTab(null);
          setError(t.errorSpeechSynthesis);
      };

      // If voices are not loaded yet, this might fail, but now we have better error logging
      window.speechSynthesis.speak(utterance);
      setIsSpeaking(true);
      setSpeakingTab(tab);
  }, [isSpeaking, speakingTab, language, voices, t]);

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDraggingOver(true);
  };
  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDraggingOver(false);
  };
  const handleDrop = (e) => {
    e.preventDefault();
    setIsDraggingOver(false);
    const file = e.dataTransfer.files[0];
    if (file) {
      handleFileUpload(file);
    }
  };


  return (
    <div className="container">
      <header>
          <div className="header-content">
              <div className="logo-container">
                  <svg className="logo" width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M12 2L2 7V17L12 22L22 17V7L12 2Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M2 7L12 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M22 7L12 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M12 22V12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M7 4.5L17 9.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                  <div className="logo-text">
                      <h1>{t.headerTitle}</h1>
                      <p>{t.headerSubtitle}</p>
                  </div>
              </div>
              <button onClick={toggleTheme} className="theme-toggle-button" aria-label="Toggle theme">
                  {theme === 'light' ? (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>
                  ) : (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>
                  )}
              </button>
          </div>
      </header>
      <main>
        <div 
          className={`panel input-panel ${isDraggingOver ? 'drag-over' : ''}`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
        >
          <h2>{t.yourDocument}</h2>
           <div className="language-selector-wrapper">
            <label htmlFor="language-select">{t.analysisLanguageLabel}</label>
            <select id="language-select" value={language} onChange={e => setLanguage(e.target.value)} disabled={isLoading}>
              {INDIAN_LANGUAGES.map(lang => <option key={lang.code} value={lang.code}>{lang.name}</option>)}
            </select>
          </div>
           {uploadedFile && <div className="file-info">{t.analyzedFile}: {uploadedFile.name}</div>}
          <textarea
            value={documentText}
            placeholder={t.textareaPlaceholder}
            aria-label="Legal document input"
            readOnly
          />
          <div className="actions">
            <label htmlFor="file-upload" className={`button file-button ${isLoading ? 'disabled' : ''}`}>
              {t.uploadFileButton}
            </label>
            <input id="file-upload" type="file" accept=".txt,.pdf,.jpg,.jpeg,.png,.webp,.docx" onChange={handleFileChange} disabled={isLoading} />
            <button onClick={handleStartAnalysis} disabled={isLoading || !uploadedFile}>
              { isLoading ? t.analyzingButton : t.summarizeButton}
            </button>
          </div>
           {error && 
            <div className="error-box" role="alert">
              <span>{error}</span>
              <button onClick={() => setError('')} aria-label={t.dismissError}>&times;</button>
            </div>
           }
        </div>

        <div className="panel output-panel">
          {isLoading ? (
            <div className="loading-container" role="status" aria-live="polite">
              <div className="spinner"></div>
              <p>{loadingMessage || t.loadingMessageDefault}</p>
            </div>
          ) : (summary || risks.length > 0 || eli15) ? (
            <>
              <div className="tabs">
                <button onClick={() => setActiveTab('summary')} className={activeTab === 'summary' ? 'active' : ''}>{t.plainSummaryTab}</button>
                 <button onClick={() => setActiveTab('eli15')} className={activeTab === 'eli15' ? 'active' : ''}>{t.eli15Tab}</button>
                <button onClick={() => setActiveTab('risks')} className={activeTab === 'risks' ? 'active' : ''}>
                  {t.riskAnalysisTab} {risks.length > 0 && <span className="risk-count">{risks.length}</span>}
                </button>
                <button onClick={() => setActiveTab('qa')} className={activeTab === 'qa' ? 'active' : ''}>{t.askQuestionTab}</button>
              </div>
              <div className="tab-content">
                {activeTab === 'summary' && <div className="content-wrapper tab-pane">
                    <div className="content-header">
                        {language === 'en' && (
                          <button className="read-aloud-button" onClick={() => handleReadAloud(summary, 'summary')}>
                             {isSpeaking && speakingTab === 'summary' ? t.stopButton : t.readAloudButton}
                          </button>
                        )}
                        <button className="copy-button" onClick={() => handleCopy(summary, 'summary')}>{copiedSummary ? t.copiedButton : t.copyButton}</button>
                    </div>
                    <div className="summary-content" dangerouslySetInnerHTML={{__html: summary ? marked.parse(summary) : ''}}/>
                </div>}

                {activeTab === 'eli15' && <div className="content-wrapper tab-pane">
                    <div className="content-header">
                        {language === 'en' && (
                            <button className="read-aloud-button" onClick={() => handleReadAloud(eli15, 'eli15')}>
                                {isSpeaking && speakingTab === 'eli15' ? t.stopButton : t.readAloudButton}
                            </button>
                        )}
                        <button className="copy-button" onClick={() => handleCopy(eli15, 'eli15')}>{copiedEli15 ? t.copiedButton : t.copyButton}</button>
                    </div>
                    <div className="summary-content" dangerouslySetInnerHTML={{__html: eli15 ? marked.parse(eli15) : ''}}/>
                </div>}
                
                {activeTab === 'risks' && (
                  <div className="risks-content tab-pane">
                    {risks.length > 0 ? risks.map((risk, index) => (
                      <div key={index} className="risk-item">
                        <h3>{risk.clause}</h3>
                        <p>{risk.explanation}</p>
                        <div className="risk-suggestion">
                           <p><strong>{t.suggestionLabel}</strong> {risk.suggestion}</p>
                        </div>
                      </div>
                    )) : <p>{t.noRisksFound}</p>}
                  </div>
                )}
                
                {activeTab === 'qa' && (
                  <div className="qa-content tab-pane">
                    <div className="qa-history" ref={qaHistoryRef}>
                      {qaHistory.length === 0 && <p className="placeholder-text">{t.qaPlaceholder}</p>}
                      {qaHistory.map((entry, index) => (
                        <div key={index} className={`qa-message ${entry.role}`}>
                          <p dangerouslySetInnerHTML={{__html: marked.parse(entry.text.replace('...', '...&nbsp;'))}} />
                        </div>
                      ))}
                    </div>
                    <form onSubmit={handleQaSubmit} className="qa-form">
                      <input
                        type="text"
                        value={currentQuestion}
                        onChange={(e) => setCurrentQuestion(e.target.value)}
                        placeholder={t.qaInputPlaceholder}
                        aria-label="Ask a question about the document"
                        disabled={!analyzedText || isLoading}
                      />
                      <button type="submit" disabled={!currentQuestion || isLoading}>{t.sendButton}</button>
                    </form>
                  </div>
                )}
              </div>
            </>
          ) : (
            <div className="placeholder-container">
                <h2>{t.welcomeTitle}</h2>
                <p>{t.welcomeMessage1}</p>
                <p>{t.welcomeMessage2}</p>
            </div>
          )}
        </div>
      </main>
      <footer>
        <p>{t.footerDisclaimer}</p>
      </footer>
    </div>
  );
};

const container = document.getElementById('root');
const root = createRoot(container);
root.render(<App />);